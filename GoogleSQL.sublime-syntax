%YAML 1.2
---
name: GoogleSQL
scope: source.sql

file_extensions:
  - sql
  - ddl
  - dml

first_line_match: |-
  (?xi:
    ^ \s* -- .*? -\*- .*? \bsql\b .*? -\*-  # editorconfig
  )

variables:
  end_identifier: (?=[ \t]*(?:[^\w\-'"`. \t]|$))

contexts:
  prototype:
    - include: comments
  main:
    - match: |-
        (?xi)
        \b(create(?:\s+or\s+replace)?)\s+
        (aggregate|conversion|database|domain|function|group|((?:fulltext|spatial|unique)\s+)?index|language|operator class|operator|procedure|rule|schema|sequence|((?:temp)\s+)?table(?:space)?|trigger|type|user|view)
        \b\s*
      scope: meta.create.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.sql
      push: create-condition
    - match: (?i:\s*\b(drop)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|procedure|rule|schema|sequence|table|tablespace|trigger|type|user|view))
      scope: meta.drop.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.sql
      push: drop-condition
    - match: (?i:\s*(drop)\s+(table)\s+(\w+)(\s+cascade)?\b)
      scope: meta.drop.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.table.sql
        3: entity.name.function.sql
        4: keyword.other.cascade.sql
    - match: (?i:\s*\b(alter)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|procedure|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)
      scope: meta.alter.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.table.sql
    - match: (?i:\s*\b(add)\s+(column|constraint|fulltext\s+(index|key)|index|spatial\s+(index|key)))
      scope: meta.add.sql
      captures:
        1: keyword.other.add.sql
        2: keyword.other.sql
    - match: |-
        (?xi)

                # normal stuff, capture 1
                \b(ARRAY|BIGNUMERIC|BOOL|BYTES|DATE|DATETIME|ENUM|FLOAT64|GEOGRAPHY|INT64|INTERVAL|JSON|NUMERIC|RANGE|STRING|STRUCT|TIME|TIMESTAMP)\b

                # numeric suffix, capture 2 + 3i
                |\b(bit\svarying|character\s+(?:varying)?|tinyint|var\schar|float|interval)\((\d+)\)

                # optional numeric suffix, capture 4 + 5i
                |\b(char|number|nvarchar|varbinary|varchar|string\d?)\b(?:\((\d+)\))?

                # special case, capture 6 + 7i + 8i
                |\b(numeric|decimal)\b(?:\((\d+),(\d+)\))?

                # special case, captures 9, 10i, 11
                |\b(times?)\b(?:\((\d+)\))?(\swith(?:out)?\s+time\s+zone\b)?

                # special case, captures 12, 13, 14i, 15
                |\b(timestamp)(?:(s|tz))?\b(?:\((\d+)\))?(\s(with|without)\s+time\s+zone\b)?


      captures:
        1: storage.type.sql
        2: storage.type.sql
        3: constant.numeric.sql
        4: storage.type.sql
        5: constant.numeric.sql
        6: storage.type.sql
        7: constant.numeric.sql
        8: constant.numeric.sql
        9: storage.type.sql
        10: constant.numeric.sql
        11: storage.type.sql
        12: storage.type.sql
        13: storage.type.sql
        14: constant.numeric.sql
        15: storage.type.sql
    - match: (?i:\b(((?:foreign|fulltext|primary|unique)\s+)?key|references|on\sdelete(\s+cascade)?|on\supdate(\s+cascade)?|check|constraint|default)\b)
      scope: storage.modifier.sql
    - match: \b\d+\b
      scope: constant.numeric.sql
    - match: (?i:\bfalse\b)
      scope: constant.language.boolean.false.sql
    - match: (?i:\btrue\b)
      scope: constant.language.boolean.true.sql
    - match: (?i:\b(null)\b)
      scope: constant.language.null.sql
    - match: (?i:\b(coalesce|if|ifnull|nullif)\b)
      scope: keyword.other.conditional_expression.sql
    - match: (?i:\b(select(\s+(distinct|top))?|insert(\s+(ignore\s+)?into)?|update|delete|truncate|from|declare|options|cluster by|partition by|set|where|group\s+by|with|case|when|then|else|end|union(\s+all)?|using|order\s+by|limit|(inner|cross)\s+join|join|straight_join|(left|right)(\s+outer)?\s+join|natural(\s+(left|right)(\s+outer)?)?\s+join)\b)
      scope: keyword.other.DML.sql
    - match: (?i:\b(ALL|AND|ANY|ARRAY|AS|ASC|ASSERT|ASSERT_ROWS_MODIFIED|AT|BETWEEN|BY|CASE|CAST|COLLATE|CONTAINS|CREATE|CROSS|CUBE|CURRENT|DEFAULT|DEFINE|DESC|DISTINCT|ELSE|END|ENUM|ESCAPE|EXCET|EXCLUDE|EXISTS|EXTRACT|FALSE|FETCH|FOLLOWING|FOR|FROM|FULL|GROUP|GROUPING|GROUPS|HASH|HAVING|IF|IGNORE|IN|INNER|INTERSECT|INTERVAL|INTO|IS|JOIN|LATERAL|LEFT|LIKE|LIMT|LOOKUP|MERGE|NATURAL|NEW|NO|NOT|NULL|NULLS|OF|ON|OR|ORDER|OUTER|OVER|PARTITION|PRECEDING|PROTO|QUALIFY|RANGE|RECURSIVE|RESPECT|RIGHT|ROLLUP|ROWS|SELECT|SET|SOME|STRUT|TABLESAMPLE|THEN|TO|TREAT|TRUE|UNBOUNDED|UNION|UNNEST|USING|WHEN|WHERE|WINDOW|WITH|WITHIN)\b)
      scope: keyword.other.reserved.sql
    - include: logical-operators
    - match: (?i:\b(like|not|and|or)\b)
      scope: keyword.operator.logical.sql
      branch_point: like-strings-branch
      branch:
        - like-string-not-followed-by-escape
        - like-string-followed-by-escape-slash
        - like-string-followed-by-escape-caret
        - like-string-followed-by-unknown-escape
    - match: (?i:\bvalues\b)
      scope: keyword.other.DML.II.sql
    - match: (?i:\b(begin(\s+work)?|start\s+transaction|commit(\s+work)?|rollback(\s+work)?)\b)
      scope: keyword.other.LUW.sql
    - match: (?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)
      scope: keyword.other.authorization.sql
    - match: (?i:\s*\b(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)
      scope: keyword.other.object-comments.sql
    - match: (?i)\bas\b
      scope: keyword.operator.assignment.alias.sql
    - match: (?i)\b(asc|desc)\b
      scope: keyword.other.order.sql
    - match: \*
      scope: constant.other.wildcard.asterisk.sql
    - match: "<=>|[!<>]?=|<>|<|>"
      scope: keyword.operator.comparison.sql
    - match: '-|\+|/'
      scope: keyword.operator.arithmetic.sql
    - match: \|\|
      scope: keyword.operator.concatenation.sql
    - match: (?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b
      comment: List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html
      scope: support.function.scalar.sql
    - comment: List of Bigquery AEAD encryption functions
      match: (?i)\b(AEAD.DECRYPT_BYTES|AEAD.DECRYPT_STRING|AEAD.ENCRYPT|DETERMINISTIC_DECRYPT_BYTES|DETERMINISTIC_DECRYPT_STRING|DETERMINISTIC_ENCRYPT|KEYS.ADD_KEY_FROM_RAW_BYTES|KEYS.KEYSET_CHAIN|KEYS.KEYSET_FROM_JSON|KEYS.KEYSET_LENGTH|KEYS.KEYSET_TO_JSON|KEYS.NEW_KEYSET|KEYS.NEW_WRAPPED_KEYSET|KEYS.REWRAP_KEYSET|KEYS.ROTATE_KEYSET|KEYS.ROTATE_WRAPPED_KEYSET)(?=\s*\()
      scope: support.function.aead_encryption_functions.sql
    - comment: List of Bigquery Aggregate functions
      match: (?i)\b(ANY_VALUE|ARRAY_AGG|ARRAY_CONCAT_AGG|AVG|BIT_AND|BIT_OR|BIT_XOR|COUNT|COUNTIF|GROUPING|LOGICAL_AND|LOGICAL_OR|MAX|MAX_BY|MIN|MIN_BY|STRING_AGG|SUM)(?=\s*\()
      scope: support.function.aggregate_functions.sql
    - comment: List of Bigquery Approximate aggregate functions
      match: (?i)\b(APPROX_COUNT_DISTINCT|APPROX_QUANTILES|APPROX_TOP_COUNT|APPROX_TOP_SUM)(?=\s*\()
      scope: support.function.approximate_aggregate_functions.sql
    - comment: List of Bigquery Array functions
      match: (?i)\b(ARRAY|ARRAY_CONCAT|ARRAY_LENGTH|ARRAY_REVERSE|ARRAY_TO_STRING|GENERATE_ARRAY|GENERATE_DATE_ARRAY|GENERATE_RANGE_ARRAY|GENERATE_TIMESTAMP_ARRAY)(?=\s*\()
      scope: support.function.array_functions.sql
    - comment: List of Bigquery Bit functions
      match: (?i)\b(BIT_COUNT)(?=\s*\()
      scope: support.function.bit_functions.sql
    - comment: List of Bigquery Conversion functions
      match: (?i)\b(CAST|PARSE_BIGNUMERIC|PARSE_NUMERIC|SAFE_CAST)(?=\s*\()
      scope: support.function.conversion_functions.sql
    - comment: List of Bigquery Date functions
      match: (?i)\b(CURRENT_DATE|DATE|DATE_ADD|DATE_DIFF|DATE_FROM_UNIX_DATE|DATE_SUB|DATE_TRUNC|EXTRACT|FORMAT_DATE|LAST_DAY (date)|PARSE_DATE|UNIX_DATE)(?=\s*\()
      scope: support.function.date_functions.sql
    - comment: List of Bigquery Datetime functions
      match: (?i)\b(CURRENT_DATETIME|DATETIME|DATETIME_ADD|DATETIME_DIFF|DATETIME_SUB|DATETIME_TRUNC|EXTRACT|FORMAT_DATETIME|LAST_DAY|PARSE_DATETIME)(?=\s*\()
      scope: support.function.datetime_functions.sql
    - comment: List of Bigquery Debugging functions
      match: (?i)\b(ERROR)(?=\s*\()
      scope: support.function.debugging_functions.sql
    - comment: List of Bigquery Differentially private aggregate functions
      match: (?i)\b(AVG|COUNT|PERCENTILE_CONT|SUM)(?=\s*\()
      scope: support.function.differentially_private_aggregate_functions.sql
    - comment: List of Bigquery Federated query functions
      match: (?i)\b(EXTERNAL_QUERY)(?=\s*\()
      scope: support.function.federated_query_functions.sql
    - comment: List of Bigquery DLP encryption functions
      match: (?i)\b(DLP_DETERMINISTIC_ENCRYPT|DLP_DETERMINISTIC_DECRYPT|DLP_KEY_CHAIN)(?=\s*\()
      scope: support.function.dlp_encryption_functions.sql
    - comment: List of Bigquery Geography functions
      match: (?i)\b(ST_ANGLE|ST_AREA|ST_ASBINARY|ST_ASGEOJSON|ST_ASTEXT|ST_AZIMUTH|ST_BOUNDARY|ST_BOUNDINGBOX|ST_BUFFER|ST_BUFFERWITHTOLERANCE|ST_CENTROID|ST_CENTROID_AGG|ST_CLOSESTPOINT|ST_CLUSTERDBSCAN|ST_CONTAINS|ST_CONVEXHULL|ST_COVEREDBY|ST_COVERS|ST_DIFFERENCE|ST_DIMENSION|ST_DISJOINT|ST_DISTANCE|ST_DUMP|ST_DWITHIN|ST_ENDPOINT|ST_EQUALS|ST_EXTENT|ST_EXTERIORRING|ST_GEOGFROM|ST_GEOGFROMGEOJSON|ST_GEOGFROMTEXT|ST_GEOGFROMWKB|ST_GEOGPOINT|ST_GEOGPOINTFROMGEOHASH|ST_GEOHASH|ST_GEOMETRYTYPE|ST_HAUSDORFFDISTANCE|ST_HAUSDORFFDWITHIN|ST_INTERIORRINGS|ST_INTERSECTION|ST_INTERSECTS|ST_INTERSECTSBOX|ST_ISCLOSED|ST_ISCOLLECTION|ST_ISEMPTY|ST_ISRING|ST_LENGTH|ST_LINEINTERPOLATEPOINT|ST_LINELOCATEPOINT|ST_LINESUBSTRING|ST_MAKELINE|ST_MAKEPOLYGON|ST_MAKEPOLYGONORIENTED|ST_MAXDISTANCE|ST_NPOINTS|ST_NUMGEOMETRIES|ST_NUMPOINTS|ST_PERIMETER|ST_POINTN|ST_SIMPLIFY|ST_SNAPTOGRID|ST_STARTPOINT|ST_TOUCHES|ST_UNION|ST_UNION_AGG|ST_WITHIN|ST_X|ST_Y|S2_CELLIDFROMPOINT|S2_COVERINGCELLIDS)(?=\s*\()
      scope: support.function.geography_functions.sql
    - comment: List of Bigquery Hash functions
      match: (?i)\b(FARM_FINGERPRINT|MD5|SHA1|SHA256|SHA512)(?=\s*\()
      scope: support.function.hash_functions.sql
    - comment: List of Bigquery HyperLogLog++ functions
      match: (?i)\b(HLL_COUNT.EXTRACT|HLL_COUNT.INIT|HLL_COUNT.MERGE|HLL_COUNT.MERGE_PARTIAL)(?=\s*\()
      scope: support.function.hyperloglog++_functions.sql
    - comment: List of Bigquery Interval functions
      match: (?i)\b(EXTRACT (interval)|JUSTIFY_DAYS|JUSTIFY_HOURS|JUSTIFY_INTERVAL|MAKE_INTERVAL)(?=\s*\()
      scope: support.function.interval_functions.sql
    - comment: List of Bigquery JSON functions
      match: (?i)\b(BOOL|FLOAT64|INT64|JSON_ARRAY|JSON_ARRAY_APPEND|JSON_ARRAY_INSERT|JSON_EXTRACT|JSON_EXTRACT_ARRAY|JSON_EXTRACT_SCALAR|JSON_EXTRACT_STRING_ARRAY|JSON_KEYS|JSON_OBJECT|JSON_QUERY|JSON_QUERY_ARRAY|JSON_REMOVE|JSON_SET|JSON_STRIP_NULLS|JSON_TYPE|JSON_VALUE|JSON_VALUE_ARRAY|LAX_BOOL|LAX_FLOAT64|LAX_INT64|LAX_STRING|PARSE_JSON|STRING|TO_JSON|TO_JSON_STRING)(?=\s*\()
      scope: support.function.json_functions.sql
    - comment: List of Bigquery Mathematical functions
      match: (?i)\b(ABS|ACOS|ACOSH|ASIN|ASINH|ATAN|ATAN2|ATANH|CBRT|CEIL|CEILING|COS|COSH|COSINE_DISTANCE|COT|COTH|CSC|CSCH|DIV|EXP|EUCLIDEAN_DISTANCE|FLOOR|GREATEST|IS_INF|IS_NAN|LEAST|LN|LOG|LOG10|MOD|POW|POWER|RAND|RANGE|RANGE_BUCKET|ROUND|SAFE_ADD|SAFE_DIVIDE|SAFE_MULTIPLY|SAFE_NEGATE|SAFE_SUBTRACT|SEC|SECH|SIGN|SIN|SINH|SQRT|TAN|TANH|TRUNC)(?=\s*\()
      scope: support.function.mathematical_functions.sql
    - comment: List of Bigquery Navigation functions
      match: (?i)\b(FIRST_VALUE|LAG|LAST_VALUE|LEAD|NTH_VALUE|PERCENTILE_CONT|PERCENTILE_DISC)(?=\s*\()
      scope: support.function.navigation_functions.sql
    - comment: List of Bigquery Net functions
      match: (?i)\b(NET.HOST|NET.IP_FROM_STRING|NET.IP_NET_MASK|NET.IP_TO_STRING|NET.IP_TRUNC|NET.IPV4_FROM_INT64|NET.IPV4_TO_INT64|NET.PUBLIC_SUFFIX|NET.REG_DOMAIN|NET.SAFE_IP_FROM_STRING)(?=\s*\()
      scope: support.function.net_functions.sql
    - comment: List of Bigquery Numbering functions
      match: (?i)\b(CUME_DIST|DENSE_RANK|NTILE|PERCENT_RANK|RANK|ROW_NUMBER)(?=\s*\()
      scope: support.function.numbering_functions.sql
    - comment: List of Bigquery Range functions
      match: (?i)\b(RANGE_CONTAINS|RANGE_END|RANGE_INTERSECT|RANGE_OVERLAPS|RANGE_SESSIONIZE|RANGE_START)(?=\s*\()
      scope: support.function.range_functions.sql
    - comment: List of Bigquery Search functions
      match: (?i)\b(SEARCH|VECTOR_SEARCH)(?=\s*\()
      scope: support.function.search_functions.sql
    - comment: List of Bigquery Security functions
      match: (?i)\b(SESSION_USER)(?=\s*\()
      scope: support.function.security_functions.sql
    - comment: List of Bigquery Statistical aggregate functions
      match: (?i)\b(CORR|COVAR_POP|COVAR_SAMP|STDDEV|STDDEV_POP|STDDEV_SAMP|VAR_POP|VAR_SAMP|VARIANCE)(?=\s*\()
      scope: support.function.statistical_aggregate_functions.sql
    - comment: List of Bigquery String functions
      match: (?i)\b(ASCII|BYTE_LENGTH|CHAR_LENGTH|CHARACTER_LENGTH|CHR|CODE_POINTS_TO_BYTES|CODE_POINTS_TO_STRING|COLLATE|CONCAT|CONTAINS_SUBSTR|EDIT_DISTANCE|ENDS_WITH|FORMAT|FROM_BASE32|FROM_BASE64|FROM_HEX|INITCAP|INSTR|LEFT|LENGTH|LOWER|LPAD|LTRIM|NORMALIZE|NORMALIZE_AND_CASEFOLD|OCTET_LENGTH|REGEXP_CONTAINS|REGEXP_EXTRACT|REGEXP_EXTRACT_ALL|REGEXP_INSTR|REGEXP_REPLACE|REGEXP_SUBSTR|REPEAT|REPLACE|REVERSE|RIGHT|RPAD|RTRIM|SAFE_CONVERT_BYTES_TO_STRING|SOUNDEX|SPLIT|STARTS_WITH|STRPOS|SUBSTR|SUBSTRING|TO_BASE32|TO_BASE64|TO_CODE_POINTS|TO_HEX|TRANSLATE|TRIM|UNICODE|UPPER)(?=\s*\()
      scope: support.function.string_functions.sql
    - comment: List of Bigquery Table functions
      match: (?i)\b(EXTERNAL_OBJECT_TRANSFORM)(?=\s*\()
      scope: support.function.table_functions.sql
    - comment: List of Bigquery Text analysis functions
      match: (?i)\b(BAG_OF_WORDS|TEXT_ANALYZE|TF_IDF)(?=\s*\()
      scope: support.function.text_analysis_functions.sql
    - comment: List of Bigquery Time functions
      match: (?i)\b(CURRENT_TIME|EXTRACT (time)|FORMAT_TIME|PARSE_TIME|TIME|TIME_ADD|TIME_DIFF|TIME_SUB|TIME_TRUNC)(?=\s*\()
      scope: support.function.time_functions.sql
    - comment: List of Bigquery Time series functions
      match: (?i)\b(APPENDS|CHANGES|DATE_BUCKET|DATETIME_BUCKET|GAP_FILL|TIMESTAMP_BUCKET)(?=\s*\()
      scope: support.function.time_series_functions.sql
    - comment: List of Bigquery Timestamp functions
      match: (?i)\b(CURRENT_TIMESTAMP|EXTRACT (timestamp)|FORMAT_TIMESTAMP|PARSE_TIMESTAMP|STRING
        (timestamp)|TIMESTAMP|TIMESTAMP_ADD|TIMESTAMP_DIFF|TIMESTAMP_MICROS|TIMESTAMP_MILLIS|TIMESTAMP_SECONDS|TIMESTAMP_SUB|TIMESTAMP_TRUNC|UNIX_MICROS|UNIX_MILLIS|UNIX_SECONDS)(?=\s*\()
      scope: support.function.timestamp_functions.sql
    - comment: List of Bigquery Utility functions
      match: (?i)\b(GENERATE_UUID)(?=\s*\()
      scope: support.function.utility_functions.sql
    - match: \b(\w+?)\.(\w+)\b
      captures:
        1: constant.other.database-name.sql
        2: constant.other.table-name.sql
    - include: strings
    - include: regexps
    - match: (\()(\))
      comment: Allow for special ↩ behavior
      scope: meta.block.sql
      captures:
        1: punctuation.section.scope.begin.sql
        2: punctuation.section.scope.end.sql
    - match: (?i)\bon\b
      scope: keyword.operator.word.sql
    - match: ','
      scope: punctuation.separator.sequence.sql
    - match: ';'
      scope: punctuation.terminator.statement.sql
  comments:
    - meta_include_prototype: false
    - match: '--'
      scope: punctuation.definition.comment.sql
      push: inside-double-dash-comment
    - match: '#'
      scope: punctuation.definition.comment.sql
      push: inside-number-sign-comment
    - match: /\*
      scope: punctuation.definition.comment.begin.sql
      push: inside-comment-block
  inside-double-dash-comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-dash.sql
    - match: \n
      pop: true
  inside-number-sign-comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.number-sign.sql
    - match: \n
      pop: true
  inside-comment-block:
    - meta_include_prototype: false
    - meta_scope: comment.block.sql
    - match: \*/
      scope: punctuation.definition.comment.end.sql
      pop: true
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.sql
  regexps:
    - match: /(?=\S.*/)
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.regexp.sql
        - match: /
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-interpolation
        - match: \\/
          scope: constant.character.escape.slash.sql
    - match: '%r\{'
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.regexp.modr.sql
        - match: '\}'
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-interpolation
  string-escape:
    - meta_include_prototype: false
    - match: \\.
      scope: constant.character.escape.sql
  string-interpolation:
    - meta_include_prototype: false
    - match: '(#\{)([^\}]*)(\})'
      scope: string.interpolated.sql
      captures:
        1: punctuation.definition.string.begin.sql
        3: punctuation.definition.string.end.sql
  strings:
    - match: "'''"
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: "'''"
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-escape
    - match: '"""'
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: '"""'
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-escape
    - match: "'"
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: "''"
          scope: constant.character.escape.sql
        - match: "'"
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-escape
    - match: "`"
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.other.backtick.sql
        - match: "`"
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-escape
    - match: '"'
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.sql
        - match: '""'
          scope: constant.character.escape.sql
        - match: '"'
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-interpolation
    - match: '%\{'
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.other.quoted.brackets.sql
        - match: '\}'
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-interpolation
  identifier-create:
    - meta_content_scope: meta.toc-list.full-identifier.sql
    - match: '(?:(\w+)|''([^'']+)''|"([^"]+)"|`([^`]+)`){{end_identifier}}'
      scope: meta.toc-list.full-identifier.sql
      captures:
        1: entity.name.function.sql
        2: entity.name.function.sql
        3: entity.name.function.sql
        4: entity.name.function.sql
      pop: true
      # Schema identifiers
    - match: (?:\w+|'[^']+'|"[^"]+"|`[^`]+`)\s*(\.)
      captures:
        1: punctuation.accessor.dot.sql
      # Handle situations where the schema and .
    - match: '{{end_identifier}}'
      pop: true
  create-condition:
    - include: dml-condition
    - match: (?=\S)
      set: identifier-create
  drop-condition:
    - include: dml-condition
    - match: (?=\S)
      pop: true
  dml-condition:
    - match: (?i:\b(if)\b)
      scope: keyword.control.flow.sql
    - include: logical-operators
  logical-operators:
    - match: (?i:\b(and|or|having|exists|between|in|not|is)\b)
      scope: keyword.operator.logical.sql
  like-string-not-followed-by-escape:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-fail, inside-like-single-quoted-string]
    - match: (?=\S)
      pop: true
  like-string-followed-by-escape-slash:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-character-slash, like-escape-pop, inside-like-single-quoted-string-slash-escape]
    - match: (?=\S)
      pop: true
  like-string-followed-by-escape-caret:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-character-caret, like-escape-pop, inside-like-single-quoted-string-caret-escape]
    - match: (?=\S)
      pop: true
  like-string-followed-by-unknown-escape:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set: [like-escape-character-any, like-escape-pop, inside-like-single-quoted-string]
    - match: (?=\S)
      pop: true
  inside-like-single-quoted-string-slash-escape:
    - meta_include_prototype: false
    - meta_scope: meta.string.like.sql string.quoted.single.sql
    - match: \\.
      scope: constant.character.escape.sql
    - include: inside-like-single-quoted-string
  inside-like-single-quoted-string-caret-escape:
    - meta_include_prototype: false
    - meta_scope: meta.string.like.sql string.quoted.single.sql
    - match: \^.
      scope: constant.character.escape.sql
    - include: inside-like-single-quoted-string
  inside-like-single-quoted-string:
    - meta_include_prototype: false
    - meta_scope: meta.string.like.sql string.quoted.single.sql
    - match: \'
      scope: punctuation.definition.string.end.sql
      pop: true
    - match: |-
        (?x)
        (\[)(\^)?
        (?:.|[^]'-]+?)
        (?:(-)[^]'-]*)?
        (\])
      scope: meta.set.like.sql
      captures:
        1: keyword.control.set.begin.sql
        2: keyword.control.set.negation.sql
        3: constant.other.range.sql
        4: keyword.control.set.end.sql
    - match: '[%_]'
      scope: keyword.operator.wildcard.sql
  like-escape-fail:
    - match: (?i:\bescape\b)
      fail: like-strings-branch
    - match: (?=\S)
      pop: true
  like-escape-pop:
    - match: (?i:\bescape\b)
      scope: keyword.operator.word.sql
      pop: true
    - match: (?=\S)
      pop: true
  like-escape-character-any:
    - match: (\')([^'])(\')
      captures:
        0: meta.string.escape.sql string.quoted.single.sql
        1: punctuation.definition.string.begin.sql
        2: constant.character.escape.sql
        3: punctuation.definition.string.end.sql
      pop: true
    - match: (?=\S)
      pop: true
  like-escape-character-caret:
    - match: (\')(\^)(\')
      captures:
        0: meta.string.escape.sql string.quoted.single.sql
        1: punctuation.definition.string.begin.sql
        2: constant.character.escape.sql
        3: punctuation.definition.string.end.sql
      pop: true
    - match: (?=\S)
      fail: like-strings-branch
  like-escape-character-slash:
    - match: (\')(\\)(\')
      captures:
        0: meta.string.escape.sql string.quoted.single.sql
        1: punctuation.definition.string.begin.sql
        2: constant.character.escape.sql
        3: punctuation.definition.string.end.sql
      pop: true
    - match: (?=\S)
      fail: like-strings-branch