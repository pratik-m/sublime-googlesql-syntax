%YAML 1.2
---
name: GoogleSQL
scope: source.sql

file_extensions:
  - sql
  - ddl
  - dml
extends: Packages/SQL/SQL.sublime-syntax

variables:
  end_identifier: (?=[ \t]*(?:[^\w\-'"`. \t]|$))

contexts:
  prototype:
    - include: comments
  main:
    - match: |-
        (?xi)
        \b(create(?:\s+or\s+replace)?)((?:\s+temporary|\s+temp)?)\s+((?:view|table|aggregate\s+function|function|external\s+table|materialized\s+view|procedure|row\s+access\s+policy|table\s+function|vector\s+index|view|external\s+schema|schema|search\s+index|snapshot\s+table|assignment|capacity|reservation))((?:\s+if\s+not\s+exists)?)
        \b\s*
      scope: meta.create.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.create.sql
        3: keyword.other.create.sql
        4: keyword.operator.logical.sql
      push: create-condition
    - match: (?i:\s*\b(drop)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|procedure|rule|schema|sequence|table|tablespace|trigger|type|user|view))
      scope: meta.drop.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.sql
      push: drop-condition
    - match: (?i:\s*(drop)\s+(table)\s+(\w+)(\s+cascade)?\b)
      scope: meta.drop.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.table.sql
        3: entity.name.function.sql
        4: keyword.other.cascade.sql
    - match: (?i:\s*\b(alter)\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|procedure|rule|schema|sequence|table|tablespace|trigger|type|user|view)\s+)
      scope: meta.alter.sql
      captures:
        1: keyword.other.create.sql
        2: keyword.other.table.sql
    - match: (?i:\s*\b(add)\s+(column|constraint|fulltext\s+(index|key)|index|spatial\s+(index|key)))
      scope: meta.add.sql
      captures:
        1: keyword.other.add.sql
        2: keyword.other.sql
    - match: (?i:\b(ARRAY|BIGNUMERIC|BOOL|BYTES|DATE|DATETIME|ENUM|FLOAT64|GEOGRAPHY|INT64|INTERVAL|JSON|NUMERIC|RANGE|STRING|STRUCT|TIME|TIMESTAMP)\b)   
      captures:
        1: storage.type.sql
    - match: (?i:\b(((?:foreign|fulltext|primary|unique)\s+)?key|references|on\sdelete(\s+cascade)?|on\supdate(\s+cascade)?|check|constraint|default)\b)
      scope: storage.modifier.sql
    - match: \b\d+\b
      scope: constant.numeric.sql
    - match: (?i:\bfalse\b)
      scope: constant.language.boolean.false.sql
    - match: (?i:\btrue\b)
      scope: constant.language.boolean.true.sql
    - match: (?i:\b(null)\b)
      scope: constant.language.boolean.null.sql
    - match: (?i:\b(coalesce|ifnull|nullif)\b)
      scope: keyword.other.conditional_expression.sql
    - match: (?i:\b(execute\s+immediate)\b)
      scope: keyword.other.execute_immediate.sql
    - match: (?i:\b(when\s+((?:not\s+)?)matched)\b)
      scope: keyword.other.merge_match.sql
    - match: (?i:\b(select(\s+(distinct|top))?|insert(\s+(ignore\s+)?into)?|update|delete|truncate|from|declare|options|cluster by|partition by|set|where|group\s+by|with|case|when|then|else|end|union(\s+all)?|using|order\s+by|limit|(inner|cross)\s+join|join|straight_join|(left|right)(\s+outer)?\s+join|natural(\s+(left|right)(\s+outer)?)?\s+join)\b)
      scope: keyword.other.DML.sql
    - match: (?i:\b(ALL|AND|ANY|ARRAY|ASC|ASSERT|ASSERT_ROWS_MODIFIED|AT|BETWEEN|BY|CASE|CAST|COLLATE|CONTAINS|CREATE|CROSS|CUBE|CURRENT|DEFAULT|DEFINE|DESC|ELSE|END|ENUM|ESCAPE|EXCET|EXCLUDE|EXTRACT|FALSE|FETCH|FOLLOWING|FOR|FROM|FULL|GROUP|GROUPING|GROUPS|HASH|HAVING|IF|IGNORE|IN|INNER|INTERSECT|INTERVAL|INTO|IS|JOIN|LATERAL|LEFT|LIKE|LIMT|LOOKUP|MERGE|NATURAL|NEW|NO|NULLS|OF|ON|OR|ORDER|OUTER|OVER|PARTITION|PRECEDING|PROTO|QUALIFY|RANGE|RECURSIVE|RESPECT|RIGHT|ROLLUP|ROWS|SELECT|SET|SOME|STRUT|TABLESAMPLE|THEN|TO|TREAT|TRUE|UNBOUNDED|UNION|UNNEST|USING|WHEN|WHERE|WINDOW|WITH|WITHIN)\b)
      scope: keyword.other.reserved.sql
    - include: logical-operators
    - match: (?i:\b(like|and|or)\b)
      scope: keyword.operator.logical.sql
      branch_point: like-strings-branch
      branch:
        - like-string-not-followed-by-escape
        - like-string-followed-by-escape-slash
        - like-string-followed-by-escape-caret
        - like-string-followed-by-unknown-escape
    - match: (?i:\bvalues\b)
      scope: keyword.other.DML.II.sql
    - match: (?i:\b(begin(\s+work)?|start\s+transaction|commit(\s+work)?|rollback(\s+work)?)\b)
      scope: keyword.other.LUW.sql
    - match: (?i:\b(grant(\swith\sgrant\soption)?|revoke)\b)
      scope: keyword.other.authorization.sql
    - match: (?i:\s*\b(comment\s+on\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\s+.*?\s+(is)\s+)
      scope: keyword.other.object-comments.sql
    - match: (?i)\bas\b
      scope: keyword.operator.assignment.alias.sql
    - match: (?i)\b(asc|desc)\b
      scope: keyword.other.order.sql
    - match: \*
      scope: constant.other.wildcard.asterisk.sql
    - match: "<=>|[!<>]?=|<>|<|>"
      scope: keyword.operator.comparison.sql
    - match: '-|\+|/'
      scope: keyword.operator.arithmetic.sql
    - match: \|\|
      scope: keyword.operator.concatenation.sql
    - match: (?i)\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\b
      comment: List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html
      scope: support.function.scalar.sql
    - comment: List of Bigquery AEAD encryption functions
      match: (?i)\b(ABS|ACOS|ACOSH|AEAD.DECRYPT_BYTES|AEAD.DECRYPT_STRING|AEAD.ENCRYPT|ANY_VALUE|APPENDS|APPROX_COUNT_DISTINCT|APPROX_QUANTILES|APPROX_TOP_COUNT|APPROX_TOP_SUM|ARRAY|ARRAY_AGG|ARRAY_CONCAT|ARRAY_CONCAT_AGG|ARRAY_LENGTH|ARRAY_REVERSE|ARRAY_TO_STRING|ASCII|ASIN|ASINH|ATAN|ATAN2|ATANH|AVG|BAG_OF_WORDS|BIT_AND|BIT_COUNT|BIT_OR|BIT_XOR|BOOL|BYTE_LENGTH|CAST|CBRT|CEIL|CEILING|CHANGES|CHAR_LENGTH|CHARACTER_LENGTH|CHR|CODE_POINTS_TO_BYTES|CODE_POINTS_TO_STRING|COLLATE|CONCAT|CONTAINS_SUBSTR|CORR|COS|COSH|COSINE_DISTANCE|COT|COTH|COUNT|COUNTIF|COVAR_POP|COVAR_SAMP|CSC|CSCH|CUME_DIST|CURRENT_DATE|CURRENT_DATETIME|CURRENT_TIME|CURRENT_TIMESTAMP|DATE|DATE_ADD|DATE_BUCKET|DATE_DIFF|DATE_FROM_UNIX_DATE|DATE_SUB|DATE_TRUNC|DATETIME|DATETIME_ADD|DATETIME_BUCKET|DATETIME_DIFF|DATETIME_SUB|DATETIME_TRUNC|DENSE_RANK|DETERMINISTIC_DECRYPT_BYTES|DETERMINISTIC_DECRYPT_STRING|DETERMINISTIC_ENCRYPT|DIV|DLP_DETERMINISTIC_DECRYPT|DLP_DETERMINISTIC_ENCRYPT|DLP_KEY_CHAIN|EDIT_DISTANCE|ENDS_WITH|ERROR|EUCLIDEAN_DISTANCE|EXP|EXTERNAL_OBJECT_TRANSFORM|EXTERNAL_QUERY|EXTRACT|FARM_FINGERPRINT|FIRST_VALUE|FLOAT64|FLOOR|FORMAT|FORMAT_DATE|FORMAT_DATETIME|FORMAT_TIME|FROM_BASE32|FROM_BASE64|FROM_HEX|GAP_FILL|GENERATE_ARRAY|GENERATE_DATE_ARRAY|GENERATE_RANGE_ARRAY|GENERATE_TIMESTAMP_ARRAY|GENERATE_UUID|GREATEST|GROUPING|HLL_COUNT.EXTRACT|HLL_COUNT.INIT|HLL_COUNT.MERGE|HLL_COUNT.MERGE_PARTIAL|INITCAP|INSTR|INT64|IS_INF|IS_NAN|JSON_ARRAY|JSON_ARRAY_APPEND|JSON_ARRAY_INSERT|JSON_EXTRACT|JSON_EXTRACT_ARRAY|JSON_EXTRACT_SCALAR|JSON_EXTRACT_STRING_ARRAY|JSON_KEYS|JSON_OBJECT|JSON_QUERY|JSON_QUERY_ARRAY|JSON_REMOVE|JSON_SET|JSON_STRIP_NULLS|JSON_TYPE|JSON_VALUE|JSON_VALUE_ARRAY|JUSTIFY_DAYS|JUSTIFY_HOURS|JUSTIFY_INTERVAL|KEYS.ADD_KEY_FROM_RAW_BYTES|KEYS.KEYSET_CHAIN|KEYS.KEYSET_FROM_JSON|KEYS.KEYSET_LENGTH|KEYS.KEYSET_TO_JSON|KEYS.NEW_KEYSET|KEYS.NEW_WRAPPED_KEYSET|KEYS.REWRAP_KEYSET|KEYS.ROTATE_KEYSET|KEYS.ROTATE_WRAPPED_KEYSET|LAG|LAST_DAY|LAST_VALUE|LAX_BOOL|LAX_FLOAT64|LAX_INT64|LAX_STRING|LEAD|LEAST|LEFT|LENGTH|LN|LOG|LOG10|LOGICAL_AND|LOGICAL_OR|LOWER|LPAD|LTRIM|MAKE_INTERVAL|MAX|MAX_BY|MD5|MIN|MIN_BY|MOD|NET.HOST|NET.IP_FROM_STRING|NET.IP_NET_MASK|NET.IP_TO_STRING|NET.IP_TRUNC|NET.IPV4_FROM_INT64|NET.IPV4_TO_INT64|NET.PUBLIC_SUFFIX|NET.REG_DOMAIN|NET.SAFE_IP_FROM_STRING|NORMALIZE|NORMALIZE_AND_CASEFOLD|NTH_VALUE|NTILE|OCTET_LENGTH|PARSE_BIGNUMERIC|PARSE_DATE|PARSE_DATETIME|PARSE_JSON|PARSE_NUMERIC|PARSE_TIME|PERCENT_RANK|PERCENTILE_CONT|PERCENTILE_DISC|POW|POWER|RAND|RANGE|RANGE_BUCKET|RANGE_CONTAINS|RANGE_END|RANGE_INTERSECT|RANGE_OVERLAPS|RANGE_SESSIONIZE|RANGE_START|RANK|REGEXP_CONTAINS|REGEXP_EXTRACT|REGEXP_EXTRACT_ALL|REGEXP_INSTR|REGEXP_REPLACE|REGEXP_SUBSTR|REPEAT|REPLACE|REVERSE|RIGHT|ROUND|ROW_NUMBER|RPAD|RTRIM|S2_CELLIDFROMPOINT|S2_COVERINGCELLIDS|SAFE_ADD|SAFE_CAST|SAFE_CONVERT_BYTES_TO_STRING|SAFE_DIVIDE|SAFE_MULTIPLY|SAFE_NEGATE|SAFE_SUBTRACT|SEARCH|SEC|SECH|SESSION_USER|SHA1|SHA256|SHA512|SIGN|SIN|SINH|SOUNDEX|SPLIT|SQRT|ST_ANGLE|ST_AREA|ST_ASBINARY|ST_ASGEOJSON|ST_ASTEXT|ST_AZIMUTH|ST_BOUNDARY|ST_BOUNDINGBOX|ST_BUFFER|ST_BUFFERWITHTOLERANCE|ST_CENTROID|ST_CENTROID_AGG|ST_CLOSESTPOINT|ST_CLUSTERDBSCAN|ST_CONTAINS|ST_CONVEXHULL|ST_COVEREDBY|ST_COVERS|ST_DIFFERENCE|ST_DIMENSION|ST_DISJOINT|ST_DISTANCE|ST_DUMP|ST_DWITHIN|ST_ENDPOINT|ST_EQUALS|ST_EXTENT|ST_EXTERIORRING|ST_GEOGFROM|ST_GEOGFROMGEOJSON|ST_GEOGFROMTEXT|ST_GEOGFROMWKB|ST_GEOGPOINT|ST_GEOGPOINTFROMGEOHASH|ST_GEOHASH|ST_GEOMETRYTYPE|ST_HAUSDORFFDISTANCE|ST_HAUSDORFFDWITHIN|ST_INTERIORRINGS|ST_INTERSECTION|ST_INTERSECTS|ST_INTERSECTSBOX|ST_ISCLOSED|ST_ISCOLLECTION|ST_ISEMPTY|ST_ISRING|ST_LENGTH|ST_LINEINTERPOLATEPOINT|ST_LINELOCATEPOINT|ST_LINESUBSTRING|ST_MAKELINE|ST_MAKEPOLYGON|ST_MAKEPOLYGONORIENTED|ST_MAXDISTANCE|ST_NPOINTS|ST_NUMGEOMETRIES|ST_NUMPOINTS|ST_PERIMETER|ST_POINTN|ST_SIMPLIFY|ST_SNAPTOGRID|ST_STARTPOINT|ST_TOUCHES|ST_UNION|ST_UNION_AGG|ST_WITHIN|ST_X|ST_Y|STARTS_WITH|STDDEV|STDDEV_POP|STDDEV_SAMP|STRING|STRING_AGG|STRPOS|SUBSTR|SUBSTRING|SUM|TAN|TANH|TEXT_ANALYZE|TF_IDF|TIME|TIME_ADD|TIME_DIFF|TIME_SUB|TIME_TRUNC|TIMESTAMP_BUCKET|TO_BASE32|TO_BASE64|TO_CODE_POINTS|TO_HEX|TO_JSON|TO_JSON_STRING|TRANSLATE|TRIM|TRUNC|UNICODE|UNIX_DATE|UPPER|VAR_POP|VAR_SAMP|VARIANCE|VECTOR_SEARCH)(?=\s*\()
      scope: support.function.aead_encryption_functions.sql
    - match: \b([\w\-]+\.)\b
      comment: project identifier 
      captures: 
        1. meta.toc-list.full-identifier.sql
    - include: strings
    - include: regexps
    - match: (\()(\))
      comment: Allow for special ↩ behavior
      scope: meta.block.sql
      captures:
        1: punctuation.section.scope.begin.sql
        2: punctuation.section.scope.end.sql
    - match: (?i)\bon\b
      scope: keyword.operator.word.sql
    - match: ','
      scope: punctuation.separator.sequence.sql
    - match: ';'
      scope: punctuation.terminator.statement.sql
  
  placeholder-highlight:
    - meta_include_prototype: false 
    - match: \%.
      scope: constant.character.escape.sql
  string-escape:
    - meta_include_prototype: false
    - match: \\.
      scope: constant.character.escape.sql
  strings:
    - match: "(\'\'\'|\"\"\")"
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: "(\'\'\'|\"\"\")"
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-escape
        - include: placeholder-highlight
    - match: "'"
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: "''"
          scope: constant.character.escape.sql
        - match: "'"
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-escape

    - match: "`"
      scope:  variable.parameter.sql
      push:
        - meta_include_prototype: false
        - meta_scope:  variable.parameter.sql
        - match: "`"
          scope: variable.parameter.sql
          pop: true
        - include: string-escape
    - match: '"'
      scope: punctuation.definition.string.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.sql
        - match: '""'
          scope: constant.character.escape.sql
        - match: '"'
          scope: punctuation.definition.string.end.sql
          pop: true
        - include: string-interpolation
  identifier-create:
    - meta_content_scope: variable.parameter.sql
    - match: '(?:(\w+)|''([^'']+)''|"([^"]+)"|`([^`]+)`){{end_identifier}}'
      scope: meta.toc-list.full-identifier.sql
      captures:
        1: variable.parameter.sql
        2: variable.parameter.sql
        3: variable.parameter.sql
        4: variable.parameter.sql
      pop: true
      # Schema identifiers
    - match: (?:\w+|'[^']+'|"[^"]+"|`[^`]+`)\s*(\.)
      captures:
        # 1: punctuation.accessor.dot.sql
        1: variable.parameter.sql
       # Handle situations where the schema and .
    - match: '{{end_identifier}}'
      pop: true
  create-condition:
    # - include: dml-condition
    - match: (?=\S)
      set: identifier-create
  drop-condition:
    - include: dml-condition
    - match: (?=\S)
      pop: true
  dml-condition:
    - match: (?i:\b(if)\b)
      scope: keyword.control.flow.sql
    - include: logical-operators
  logical-operators:
    - match: (?i:\b(and|or|having|exists|between|in|is)\b)
      scope: keyword.operator.logical.sql
